Problem statement
You are given two non-negative numbers 'num1' and 'num2' represented in the form of linked lists.

The digits in the linked lists are stored in reverse order, i.e. starting from least significant digit (LSD) to the most significant digit (MSD), and each of their nodes contains a single digit.

Calculate the sum of the two numbers and return the head of the sum list.

Example :
Input:
'num1' : 1 -> 2 -> 3 -> NULL
'num2' : 4 -> 5 -> 6 -> NULL

Output: 5 -> 7 -> 9 -> NULL

SOLUTION;-
/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next) {
 *          this->data = data;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/

Node *addTwoNumbers(Node *num1, Node *num2)
{
    Node* dummy=new Node(-1);
        Node* curr=dummy;
        // Node* num1=new Node(num1);
        // Node* num2=new Node(num2);
        int carry=0;
        while(num1!=NULL || num2!=NULL){
            int sum=carry;
            if(num1) sum+=num1->data;
            if(num2) sum+=num2->data;
            Node* newNode=new Node(sum%10);
            carry=sum/10;

            curr->next=newNode;
            curr=curr->next;
            if(num1) num1=num1->next;
            if(num2) num2=num2->next;
        }
        if(carry){
            Node* newNode=new Node(carry);
            curr->next=newNode;
        }
        return dummy->next;
    }

