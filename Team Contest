Problem statement
School is organizing a team contest. You are given an array ‘SKILL’ containing the skill level of ‘N’ candidates.
Two candidates(having index ‘i’ and ‘j’) can pair up to form a team if for index i < j, SKILL[i] > 2*SKILL[j].
Your task is the return the count of all the possible pairs to take part in the contest.

Example:
Input: ‘N’ = 5
‘SKILL’ = [4, 1, 2, 3, 1] 

Output: 3
Explanation:
Possible pairs are (4,1), (4,1), (3,1).

SOLUTION:-
#include <bits/stdc++.h>
using namespace std;

void merge(vector<int> &arr,int low,int mid,int high){
    vector<int> temp;
    int left=low;
    int right=mid+1;
    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
            temp.push_back(arr[left]);
            left++;
        }
        else{
            temp.push_back(arr[right]);
            right++;
        }
    }
    while(left<=mid){
        temp.push_back(arr[left]);
            left++;
    }
    while(right<=high){
            temp.push_back(arr[right]);
            right++;
        }
   for(int i=low;i<=high;i++){
       arr[i]=temp[i-low];
   }
}

int countPairs(vector<int> &arr,int low,int mid,int high){
    int right=mid+1;
    int cnt=0;
   
    for (int i = low; i <= mid; i++) {
       while (right <= high && arr[i] > 2 * arr[right]) {
            right++;
       }
            cnt+=(right-(mid+1));
         
    }
    return cnt;
}

int mergeSort(vector<int> &arr,int low,int high){
    int cnt=0;
    if(low>=high) return cnt;
    int mid=(low+high)/2;
    
    cnt+=mergeSort(arr,low, mid);
    cnt+=mergeSort(arr,mid+1, high);
    cnt+=countPairs(arr,low,mid,high);
    merge(arr,low,mid,high);
    return cnt;
}




int team(vector<int> &skill, int n) {
  // Write your code here.
 return mergeSort(skill,0,n-1);
}
