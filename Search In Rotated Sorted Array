Problem statement
You have been given a sorted array/list 'arr' consisting of ‘n’ elements. You are also given an integer ‘k’.

Now the array is rotated at some pivot point unknown to you.
For example, if 'arr' = [ 1, 3, 5, 7, 8], then after rotating 'arr' at index 3, the array will be 'arr' = [7, 8, 1, 3, 5].

Now, your task is to find the index at which ‘k’ is present in 'arr'.

Note :
1. If ‘k’ is not present in 'arr', then print -1.
2. There are no duplicate elements present in 'arr'. 
3. 'arr' can be rotated only in the right direction.

Example:
Input: 'arr' = [12, 15, 18, 2, 4] , 'k' = 2

Output: 3

SOLUTION:-
int search(vector<int>& arr, int n, int k)
{
    // Write your code here.
    // Return the position of K in ARR else return -1.
    int l=0;
    int h=n-1;
    while(l<=h){
        int mid=(l+h)/2;
        if(arr[mid]==k){
            return mid;
        }
        if(arr[l]<=arr[mid]){
        if(arr[l]<=k && k<=arr[mid]){
        h=mid-1;
        }
        else{
            l=mid+1;
        }
        }
        else{
            if(arr[h]>=k && arr[mid]<=k){
                l=mid+1;
            }
            else{
                h=mid-1;
            }
        }
    }
    return -1;
}
