Problem statement
Given an array ‘A’ of ‘N’ integers, find the majority elements of the array.
A majority element in an array ‘A’ of size ‘N’ is an element that appears more than floor(N / 3) times.
Note: The floor function returns the number rounded down to the nearest integer.
Note: Return the array of majority elements in sorted order.
Example
Input: ‘N’ = 9 ‘A’ = [2, 2, 1, 3, 1, 1, 3, 1, 1]
Output: 1
Explanation: The frequency of ‘1’ is 5, which is greater than floor(N / 3), hence ‘1’ is the majority element.

SOLUTION:-
vector<int> majorityElement(vector<int> v) {
	int c1=0;
	int c2=0;
	int el1=INT_MIN;
	int el2=INT_MIN;
	int n=v.size();
	for(int i=0;i<n;i++){
		if(c1==0 && el2!=v[i]){
			c1=1;
			el1=v[i];
		}
		else if(c2==0 && el1!=v[i]){
			c2=1;
			el2=v[i];
		}
		else if(v[i]==el1){c1++;}
		else if(v[i]==el2){c2++;}
		else{
			c1--;
		    c2--;
			}
	}
	vector <int> ans;
	c1=0;c2=0;
	for(int i=0;i<n;i++){
		if(el1==v[i]){c1++;}
	    if(el2==v[i]){c2++;}
	}

	if(c1>n/3){
		ans.push_back(el1);
	}
	if(c2>n/3){
		ans.push_back(el2);
	}

	sort(ans.begin(),ans.end());
    return ans;
}
