Problem statement
You are given a linked list having ‘n’ nodes and an integer ‘k’.
You have to rotate the linked list to the right by ‘k’ positions .

Example :
Input: linked list = [1 2 3 4] , k = 2
Output: 3 4 1 2

SOLUTION:-
/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *rotate(Node *head, int k) {
     // Write your code here.
     if(head==NULL || head->next==NULL){
          return head;
     }
     Node* tail=head;
     int len=1;
     while(tail->next!=NULL){
          len++;
          tail=tail->next;
     }
    
     tail->next=head;
    
     if(k%len==0){tail->next=NULL;
          return head;
          }
    
     k=k%len;

  int rem=len-k;
    
   Node* temp=head;
   while(rem!=1){
        temp=temp->next;
        rem--;
   }


     head= temp->next;
     temp->next=NULL;
     return head;
}
