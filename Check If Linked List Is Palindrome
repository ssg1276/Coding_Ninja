Problem statement
You are given a Singly Linked List of integers. You have to return true if the linked list is palindrome, else return false.
A Linked List is a palindrome if it reads the same from left to right and from right to left.

Example
The lists (1 -> 2 -> 1), (3 -> 4 -> 4-> 3), and (1) are palindromes, while the lists (1 -> 2 -> 3) and (3 -> 4) are not.

SOLUTION:-
/****************************************************************

    Following is the class structure of the Node class:

    class Node
    {
    public:
        int data;
        Node *next;
        Node()
        {
            this->data = 0;
            next = NULL;
        }
        Node(int data)
        {
            this->data = data;
            this->next = NULL;
        }
        Node(int data, Node* next)
        {
            this->data = data;
            this->next = next;
        }
    };

*****************************************************************/
Node* reverseLL(Node* head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    Node* prevEl=NULL;
    Node* temp=head;
    while(temp!=NULL){
        Node* frontEl=temp->next;
        temp->next=prevEl;
        prevEl=temp;
        temp=frontEl;
    }
    return prevEl;
}
bool isPalindrome(Node *head)
{
    if(head==NULL || head->next==NULL){
        return true;
    }
    Node* slow=head;
    Node* fast=head;
    while( fast->next!=NULL && fast->next->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    Node* first=head;
    Node* second=reverseLL(slow->next);

   while(second!=NULL){
       if(first->data!=second->data){
           reverseLL(second);
           return false;
       }
       first=first->next;
       second=second->next;
   }
   reverseLL(second);
   return true;
}
