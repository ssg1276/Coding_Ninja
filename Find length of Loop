Problem statement
Youâ€™re given a linked list. The last node might point to null, or it might point to a node in the list, thus forming a cycle.
Find out whether the linked list has a cycle or not, and the length of the cycle if it does.
If there is no cycle, return 0, otherwise return the length of the cycle.

Example:
Input: Linked List: 4 -> 10 -> 3 -> 5 -> 10(at position 2)
Output: Length of cycle = 3

SOLUTION:-
/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 * };
 *
 *************************************************************************/
int findLength(struct Node *h1,struct Node *h2){
    int cnt=1;
    h2=h2->next;
    while(h1!=h2){
        cnt++;
        h2=h2->next;
    }
    return cnt;
}
int lengthOfLoop(Node *head) {
    // Write your code here
      if(head==NULL || head->next==NULL){
        return NULL;
    }
    Node* fast=head;
    Node* slow=head;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast){
            return findLength(slow,fast);
        }
    }
    
    return 0;
}
