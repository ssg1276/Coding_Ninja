Problem statement
You are given two integers, ‘dividend’ and ‘divisor’.
You are required to divide the integers without using multiplication, division, and modular operators.
Your task is to return the quotient after dividing ‘dividend’ by ‘divisor’.

Note :
In cases where the dividend is not perfectly divisible by the divisor, you are required to return the integer value of the quotient which is closer to zero.
For example - If the answer is '8.34', we return the integer part, i.e., '8'. Also, If the answer is '-2.67', we return the integer part, i.e., '-2'.
Assume we're dealing with a system that can only store integers in the 32-bit signed integer range: [2^31, 2^31-1]. If the quotient is higher than 2^31 - 1, return 2^31 - 1; if it is less than -2^31, return -2^31. 

Sample Input 1:
10 3
Sample Output 1:
3

SOLUTION:-
#include <bits/stdc++.h>

int divideTwoInteger(int dividend, int divisor) {
	// Write your code here.
        if (dividend == divisor) {
          return 1;
        }
        bool sign = true;
        long long ans = 0;
        if(dividend>=0 && divisor<0 || dividend<=0 && divisor>0){
			sign =false;
		}
	long long n=labs(dividend);
        long long d=labs(divisor);
	while(n>=d){
		long cnt=0;
		while(n>=d<<(cnt+1)){
			cnt++;
		}
		ans+=1<<cnt;
		n=n-(d<<cnt);
	}
	if(ans==(1<<31) && sign){
		return INT_MAX;
	}
	if(ans==(1<<31) && !sign){
		return INT_MIN;
	}

	return sign?ans:(-1*ans);
} 
