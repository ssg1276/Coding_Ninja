Problem statement
You are given 'n' roses and you are also given an array 'arr' where 'arr[i]' denotes that the 'ith' rose will bloom on the 'arr[i]th' day.
You can only pick already bloomed roses that are adjacent to make a bouquet. You are also told that you require exactly 'k' adjacent bloomed roses to make a single bouquet.
Find the minimum number of days required to make at least 'm' bouquets each containing 'k' roses. Return -1 if it is not possible.

Example :
Input: n = 9,  arr = [ 1, 2, 1, 2, 7, 2, 2, 3, 1 ], k = 3, m = 2

SOLUTION:-
#include <bits/stdc++.h>

bool posible(vector<int> arr, int day, int k, int m){
	int cnt=0;
	int b=0;
	for(int i=0;i<arr.size();i++){
		if(arr[i]<=day){
			cnt++;
		}
		else{
			b+=(cnt/k);
			cnt=0;
		}

	}
	b+=(cnt/k);
	if(b>=m) return true;
	else return false;
}


int roseGarden(vector<int> arr, int k, int m)
{
	int n=arr.size();
	long long val=k*1LL*m*1LL;
	if(val>n){
		return -1;
	}
	int mini=INT_MAX,maxi=INT_MIN;
	for(int i=0;i<n;i++){
		mini=min(mini,arr[i]);
		maxi=max(maxi,arr[i]);
	}

	int low=mini;
	int high=maxi;
		while(low<=high){
		int mid=(low+high)/2;
		if(posible(arr,mid,k,m)){
		
			high=mid-1;
		}
		else{
			low=mid+1;
		}
	}
return low;
}
