Problem statement
You are given a singly linked list that may or may not contain a cycle. You are supposed to return the node where the cycle begins, if a cycle exists, else return 'NULL'.
A cycle occurs when a node's next pointer returns to a previous node in the list.
Sample Input 1 :
1 2 3 4 -1
1



Sample Output 1 :
1

SOLUTION:-

Node *firstNode(Node *head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }
  Node* slow=head;
  Node* fast=head;
  while(fast->next!=NULL && fast->next->next!=NULL ){
      slow=slow->next;
      fast=fast->next->next;
      if(slow==fast){
           slow=head;
          while(fast!=slow){
          slow=slow->next;
           fast=fast->next;
         }
          return fast;
      
  }
  }

 
  return NULL;
}
