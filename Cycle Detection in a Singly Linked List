Problem statement
You are given a Singly Linked List of integers. Return true if it has a cycle, else return false.
A cycle occurs when a node's next points back to a previous node in the list.

Sample Input 1 :
1 2 3 4 -1
1


Sample Output 1 :
true

SOLUTION:-
bool detectCycle(Node *head)
{
	//	Write your code here
    if(head==NULL || head->next==NULL){
        return false;
    }
    Node* slow=head;
    Node* fast=head;
    while(fast->next!=NULL && fast->next->next!=NULL){
         slow=slow->next;
        fast=fast->next->next;
        if(slow==fast){
            return true;
        }
       
    }
    return false;
}
