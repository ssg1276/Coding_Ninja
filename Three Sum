Problem statement
You are given an array ‘ARR’ containing ‘N’ integers.
Return all the unique triplets [ARR[i], ARR[j], ARR[k]] such that i != j, j != k and k != i and their sum is equal to zero.
Example:
Input: ‘N’ = 5 
'ARR' =  [-1, -1, 2, 0, 1] 

Output: 
-1 -1 2
-1 0 1

Explanation:
(-1 -1 +2) = (-1 +0 +1) = 0.

SOLUTION:-
vector<vector<int>> triplet(int n, vector<int> &arr)
{
   sort(arr.begin(),arr.end());
   vector<vector<int>> ans;
   for(int i=0;i<n;i++){
       if(i>0 && arr[i]==arr[i-1]){
           continue;
       }
       int j=i+1;
       int k=n-1;
       while(j<k){
           int sum=arr[i]+arr[j]+arr[k];
           if(sum==0){
               vector<int> temp={arr[i],arr[j],arr[k]};
               ans.push_back(temp);
               j++;
               k--;
                     while(j<k && arr[j]==arr[j-1]){
                        j++;
                    }
                    while (j < k && arr[k] == arr[k + 1]) {
                        k--;
                    }
           }
           else if(sum>0){
               k--;
           }
           else{
               j++;
           }
       }
       
   }
   return ans;
}
